{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Lab 2: Runtime Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## <font color=DarkRed>Your Exercise: Performance of `del` keyword</font>\n",
    "\n",
    "Devise an experiment that compares the performance of the `del` operator on lists and dictionaries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Helpful Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "# # Make two lists of random 'data'\n",
    "# import random \n",
    "# arry1 = [random.random() for i in range(3)]\n",
    "# arry2 = [random.random() for i in range(3)]\n",
    "\n",
    "# # Create a simple dictionary of key:val pairs using these two lists\n",
    "# d1 = dict(zip(arry1,arry2)) \n",
    "\n",
    "# # How the deletion of a dictionary key works\n",
    "# print(d1)\n",
    "# d_keys = list(d1.keys()) \n",
    "# del d1[d_keys[0]]\n",
    "# print(d1)\n",
    "\n",
    "# # Print an empty line for spacing\n",
    "# print()\n",
    "\n",
    "# # How the deletion of a list works\n",
    "# print(arry1)\n",
    "# del arry1[0]\n",
    "# print(arry1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## <font color=green>Your Solution</font>\n",
    "\n",
    "*Use a variety of code, Markdown (text) cells below to create your solution. Nice outputs would be timing results, and even plots. You will be graded not only on correctness, but the clarity of your code, descriptive text and other output. Keep it succinct.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "from timeit import Timer\n",
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "\n",
    "\n",
    "# function for list\n",
    "def del_list():\n",
    "    arry1 = [random.random() for i in range(5000)]\n",
    "    for i in range(5000):\n",
    "        del arry1[0]\n",
    "        \n",
    "    \n",
    "        \n",
    "# function for dictionary\n",
    "def del_dic():\n",
    "    arry1 = [random.random() for i in range(5000)]\n",
    "    arry2 = [random.random() for i in range(5000)]\n",
    "    d1 = dict(zip(arry1,arry2)) \n",
    "\n",
    "    for i in range(5000):\n",
    "        d_keys = list(d1.keys()) \n",
    "        del d1[d_keys[0]]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## Testing\n",
    "\n",
    "For full credit, you must also test your solution so that you can prove to the grade your solution works."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initialize number of iteration to test\n",
    "full_iteration = 100\n",
    "iteration = 0\n",
    "t1_list = []\n",
    "t2_list = []\n",
    "\n",
    "\n",
    "#Collect time data of deleting from list\n",
    "t1 = Timer(\"del_list()\", \"from __main__ import del_list\")\n",
    "#result_t1 = t1.timeit(number=1)\n",
    "#print(\"Time for del_list(): \",\"%15.5f\" %result_t1, \"milliseconds\") \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Collect time data of deleting from dictionary\n",
    "t2 = Timer(\"del_dic()\", \"from __main__ import del_dic\")\n",
    "#result_t2 = t2.timeit(number=1)\n",
    "#print(\"Time for del_dic(): \",\"%15.5f\" %result_t2, \"milliseconds\") \n",
    "\n",
    "for i in range(full_iteration):\n",
    "    result_t1 = t1.timeit(number=1)\n",
    "    result_t2 = t2.timeit(number=1)\n",
    "\n",
    "    t1_list.append(round(result_t1,5))\n",
    "    t2_list.append(round(result_t2,5))\n",
    "\n",
    "    iteration+=1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "#calculating necessary statistics to compare\n",
    "mean_t1 = np.mean(t1_list)\n",
    "std_t1 = np.std(t1_list)\n",
    "ste_t1 = std_t1/np.sqrt(len(t1_list))\n",
    "\n",
    "mean_t2 = np.mean(t2_list)\n",
    "std_t2 = np.std(t2_list)\n",
    "ste_t2 = std_t2/np.sqrt(len(t2_list))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Arrays for the plot\n",
    "data_structures = ['List', 'Dictionary']\n",
    "x_pos = np.arange(len(data_structures))\n",
    "mean_data = [mean_t1, mean_t2]\n",
    "ste_data = [ste_t1, ste_t2]\n",
    "std_data = [std_t1,std_t2]\n",
    "\n",
    "#ttest\n",
    "ttest_result = stats.ttest_ind(t1_list,t2_list)\n",
    "pvalue = ttest_result[1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(-0.42,0.155,'P-value: 2.2914440778322568e-102')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a12daa908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#barplot\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.bar(x_pos, mean_data, yerr=ste_data, align='center',capsize = 5)\n",
    "ax.set_ylabel('Time (milliseconds)')\n",
    "ax.set_xticks(x_pos)\n",
    "ax.set_xticklabels(data_structures)\n",
    "ax.set_title('Iteration:100')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.text(-.42, .155,\"P-value: \" + str(pvalue), fontsize=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'Iteration (#)')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f40bdd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#cumulative sum plot\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "plt.plot(np.cumsum(t1_list),label = 'list')\n",
    "plt.plot(np.cumsum(t2_list),label = 'dic')\n",
    "legend = ax.legend(loc='upper left')\n",
    "\n",
    "ax.set_ylabel('Cumulative Time (milliseconds)')\n",
    "ax.set_xlabel('Iteration (#)')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
